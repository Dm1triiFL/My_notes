/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var f=Object.create;var h=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,A=Object.prototype.hasOwnProperty;var E=(n,a)=>{for(var t in a)h(n,t,{get:a[t],enumerable:!0})},m=(n,a,t,s)=>{if(a&&typeof a=="object"||typeof a=="function")for(let e of w(a))!A.call(n,e)&&e!==t&&h(n,e,{get:()=>a[e],enumerable:!(s=N(a,e))||s.enumerable});return n};var O=(n,a,t)=>(t=n!=null?f(T(n)):{},m(a||!n||!n.__esModule?h(t,"default",{value:n,enumerable:!0}):t,n)),_=n=>m(h({},"__esModule",{value:!0}),n);var S={};E(S,{default:()=>p});module.exports=_(S);var i=require("obsidian"),v=O(require("os"));var r=require("obsidian"),d=class extends r.PluginSettingTab{constructor(t){super(t.app,t);this.plugin=t}display(){let{containerEl:t}=this;t.empty(),new r.Setting(t).setName("LLM retriever language").setDesc("zh for Chinese, en for English").addText(s=>s.setPlaceholder("zh").setValue(this.plugin.settings.setLanguage).onChange(async e=>{this.plugin.settings.setLanguage=e,await this.plugin.saveSettings()})),new r.Setting(t).setName("Open how many notes").setDesc("Default number of notes to open").addText(s=>s.setPlaceholder("3").setValue(this.plugin.settings.setNoteNum.toString()).onChange(async e=>{this.plugin.settings.setNoteNum=e,await this.plugin.saveSettings()})),new r.Setting(t).setName("Conda environment name").setDesc("Default conda environment").addText(s=>s.setPlaceholder("rr-env").setValue(this.plugin.settings.setCondaEnv).onChange(async e=>{this.plugin.settings.setCondaEnv=e,await this.plugin.saveSettings()})),new r.Setting(t).setName("Path to plugin configuration").setDesc("Default").addText(s=>s.setPlaceholder("default").setValue(this.plugin.settings.PATH_TO_JSON).onChange(async e=>{this.plugin.settings.PATH_TO_JSON=e,await this.plugin.saveSettings()})),new r.Setting(t).setName("Path to plugin application").setDesc("Default").addText(s=>s.setPlaceholder("default").setValue(this.plugin.settings.PATH_TO_APP).onChange(async e=>{this.plugin.settings.PATH_TO_APP=e,await this.plugin.saveSettings()})),new r.Setting(t).setName("Open in new leaf").setDesc("Default setting for opening random notes").addToggle(s=>{s.setValue(this.plugin.settings.openInNewLeaf),s.onChange(this.plugin.setOpenInNewLeaf)})}};var u=require("obsidian");var g=class extends u.Modal{constructor(t){super(t);this.inputValue=""}onOpen(){let{contentEl:t}=this;t.classList.add("random-retrieval","modal-content"),t.createEl("h2",{text:"I am wondering.."}).classList.add("random-retrieval","modal-title");let e=t.createEl("input",{type:"text",placeholder:"about.."});e.classList.add("random-retrieval","modal-input"),e.oninput=l=>{let c=l.target;this.inputValue=c.value};let o=t.createEl("button",{text:"NightWalk \u{1F4A1}"});o.classList.add("random-retrieval","button-nightwalk"),o.addEventListener("click",()=>{new u.Notice(`Retrieving..: ${this.inputValue}`),this.resolve(this.inputValue),this.close()}),e.addEventListener("keydown",l=>{l.key==="Enter"&&o.click()})}onClose(){let{contentEl:t}=this;t.empty()}openAndGetValue(){return new Promise(t=>{this.resolve=t,this.open()})}};var P=require("child_process");var p=class extends i.Plugin{constructor(t,s){super(t,s);this.ribbonIconEl=void 0;this.settings={openInNewLeaf:!0,setNoteNum:"3",setLanguage:"zh",vaultPath:`${this.getAbsPath("data.json")}`,setCondaEnv:"rr-env",PATH_TO_JSON:`${this.getAbsPath("data.json")}/${this.manifest.dir}/data.json`,PATH_TO_APP:`${this.getAbsPath("data.json")}/${this.manifest.dir}/`};this.uvicornProcess=null;this.loadSettings=async()=>{let t=await this.loadData();t?(this.setOpenInNewLeaf(t.openInNewLeaf),this.setLanguage(t.setLanguage),this.setNoteNum(t.setNoteNum),this.setCondaEnv(t.setCondaEnv),this.PATH_TO_JSON(t.PATH_TO_JSON),this.PATH_TO_APP(t.PATH_TO_APP)):this.refreshRibbonIcon()};this.setOpenInNewLeaf=t=>{this.settings.openInNewLeaf=t,this.saveData(this.settings)};this.setLanguage=t=>{this.settings.setLanguage=t,this.saveData(this.settings)};this.setNoteNum=t=>{this.settings.setNoteNum=t,this.saveData(this.settings)};this.setCondaEnv=t=>{this.settings.setCondaEnv=t,this.saveData(this.settings)};this.PATH_TO_JSON=t=>{this.settings.PATH_TO_JSON=t,this.saveData(this.settings)};this.PATH_TO_APP=t=>{this.settings.PATH_TO_APP=t,this.saveData(this.settings)};this.refreshRibbonIcon=()=>{var t;(t=this.ribbonIconEl)==null||t.remove(),this.ribbonIconEl=this.addRibbonIcon("annoyed","Open Random Note from Search",()=>{new g(this.app).openAndGetValue().then(e=>{this.handleOpenRandomNote(e)})})};this.handleOpenRandomNote=async t=>{let s;try{let e=await(0,i.requestUrl)({url:`http://127.0.0.1:8000/search?query=${encodeURIComponent(t)}`,method:"GET"});if(e.status===200){let o=Number(this.settings.setNoteNum),l=isNaN(o)||o<=0?1:Math.min(o,e.json.ranker.documents.length);s=e.json.ranker.documents.slice(0,l).map(c=>c.meta.name.replace(this.settings.vaultPath,"").replace(".md","")),new i.Notice(`Top ${this.settings.setNoteNum} files: ${s.join(", ")}`)}else new i.Notice(`Failed: ${e.status}`)}catch(e){console.error("Error details:",e),e.response?new i.Notice(`Failed: ${e.response.status}`):e.request?new i.Notice("No response received"):new i.Notice(`Error: ${e.message}`)}for(let e of s)e&&(new i.Notice(`Opening ${e}`),await this.app.workspace.openLinkText(e,"",this.settings.openInNewLeaf,{active:!0}))};this.app=t}getAbsPath(t){let s="",e;return this.app.vault.adapter instanceof i.FileSystemAdapter&&(s=this.app.vault.adapter.getBasePath()||""),s}async onload(){await this.loadSettings(),this.refreshRibbonIcon(),this.addSettingTab(new d(this)),this.runUvicorn()}async onunload(){}async saveSettings(){await this.saveData(this.settings);let t=JSON.stringify(this.settings,null,2)}async runUvicorn(){if(v.platform()!=="darwin"){new i.Notice("This feature is only supported on macOS.");return}let t=`osascript -e 'tell application "Terminal"  
        activate
        do script "cd ${this.settings.PATH_TO_APP} && conda activate ${this.settings.setCondaEnv} && uvicorn rr_app:rr_app --reload"
        end tell'`;this.uvicornProcess=(0,P.exec)(t,(s,e,o)=>{if(s){new i.Notice(`Error: ${s.message}`);return}if(o){new i.Notice(`stderr: ${o}`);return}})}};

/* nosourcemap */